//@ requireOptions("--useWasmSIMD=1")
//@ skip if !$isSIMDPlatform
import { runSIMDTests } from "./simd-instructions-lib.js"

const verbose = false;

// Table-driven test data for SIMD logical instructions
// Each entry: [instruction, input0, input1, expected_output]
const logicalTests = [
    // v128.and test - covers various bit patterns: all 1s, all 0s, alternating, nibbles, single bits
    [
        "v128.and",
        [0xFF, 0x00, 0xAA, 0x55, 0xF0, 0x0F, 0xCC, 0x33, 0x80, 0x01, 0x7F, 0xFE, 0x3C, 0xC3, 0x69, 0x96],
        [0x0F, 0xFF, 0x55, 0xAA, 0x0F, 0xF0, 0x33, 0xCC, 0x40, 0x02, 0x80, 0x7F, 0xC3, 0x3C, 0x96, 0x69],
        [0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00]
    ],

    // v128.or test - covers complementary patterns and edge cases
    [
        "v128.or",
        [0xFF, 0x00, 0xAA, 0x55, 0xF0, 0x0F, 0xCC, 0x33, 0x80, 0x01, 0x7F, 0xFE, 0x3C, 0xC3, 0x69, 0x96],
        [0x0F, 0xFF, 0x55, 0xAA, 0x0F, 0xF0, 0x33, 0xCC, 0x40, 0x02, 0x80, 0x7F, 0xC3, 0x3C, 0x96, 0x69],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // v128.xor test - covers self-XOR (result 0) and complementary patterns
    [
        "v128.xor",
        [0xFF, 0x00, 0xAA, 0x55, 0xF0, 0x0F, 0xCC, 0x33, 0x80, 0x01, 0x7F, 0xFE, 0x3C, 0xC3, 0x69, 0x96],
        [0x0F, 0xFF, 0xAA, 0xAA, 0x0F, 0xF0, 0x33, 0xCC, 0x40, 0x02, 0x80, 0x7F, 0xC3, 0x3C, 0x96, 0x69],
        [0xF0, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // v128.andnot test - first operand AND NOT second operand
    [
        "v128.andnot",
        [0xFF, 0x00, 0xAA, 0x55, 0xF0, 0x0F, 0xCC, 0x33, 0x80, 0x01, 0x7F, 0xFE, 0x3C, 0xC3, 0x69, 0x96],
        [0x0F, 0xFF, 0x55, 0xAA, 0x0F, 0xF0, 0x33, 0xCC, 0x40, 0x02, 0x80, 0x7F, 0xC3, 0x3C, 0x96, 0x69],
        [0xF0, 0x00, 0xAA, 0x55, 0xF0, 0x0F, 0xCC, 0x33, 0x80, 0x01, 0x7F, 0x80, 0x3C, 0xC3, 0x69, 0x96]
    ],

    // v128.not test - bitwise NOT of 128-bit vector
    [
        "v128.not",
        [0x00, 0xFF, 0xAA, 0x55, 0x0F, 0xF0, 0x33, 0xCC, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // Second operand ignored for unary ops
        [0xFF, 0x00, 0x55, 0xAA, 0xF0, 0x0F, 0xCC, 0x33, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F]
    ]
];

await runSIMDTests(logicalTests, verbose, "SIMD bitwise");